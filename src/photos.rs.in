
#[derive(Debug, PartialEq, Eq, Deserialize)]
pub struct Photo {
    pub id: Id,
    pub album_id: Id,
    pub owner_id: OwnerId,
    pub user_id: Id,
    pub width: u16,
    pub height: u16,
    pub text: String,
    pub date: Timestamp,
    #[serde(default)]
    pub sizes: Vec<Thumb>,
    #[serde(default)]
    pub placer_id: Id,
    #[serde(default)]
    pub tag_id: Id,
    #[serde(default)]
    pub tag_created: Timestamp,
}

#[derive(Debug, PartialEq, Eq, Deserialize)]
pub struct Album {
    pub id: Id,
    pub thumb_id: Id,
    pub owner_id: OwnerId,
    pub title: String,
    pub description: String,
    pub created: Timestamp,
    pub updated: Timestamp,
    pub privacy: u32, // TODO ???
    pub comment_privacy: u32, // TODO ???
    pub size: u32,
    #[serde(default)]
    #[serde(deserialize_with="::api::parse_boolean")]
    pub thumb_is_last: bool,
    #[serde(default)]
    #[serde(deserialize_with="::api::parse_boolean")]
    pub can_upload: bool,
    #[serde(default)]
    pub sizes: Vec<Thumb>,
    pub thumb_src: Option<String>,
    #[serde(rename="type")]
    pub kind: Option<String>,
}

#[derive(Debug, PartialEq, Eq, Deserialize)]
pub struct Thumb {
    pub src: String,
    pub width: u16,
    pub height: u16,
    #[serde(rename="type")]
    pub kind: ThumbKind,
}

#[derive(Debug, PartialEq, Eq)]
#[repr(u8)]
pub enum ThumbKind {
    Prop75 = 's' as u8,
    Prop130 = 'm' as u8,
    Prop604 = 'x' as u8,
    Adapt130 = 'o' as u8,
    Adapt200 = 'p' as u8,
    Adapt320 = 'q' as u8,
    Prop807 = 'y' as u8,
    Prop1280x1024 = 'z' as u8,
    Prop2560x2048 = 'w' as u8,
}

impl ::serde::de::Deserialize for ThumbKind {
    fn deserialize<D: ::serde::de::Deserializer>(d: &mut D) -> Result<ThumbKind, D::Error> {
        struct Visitor;
        impl ::serde::de::Visitor for Visitor {
            type Value = ThumbKind;
            fn visit_str<E: ::serde::de::Error>(&mut self, v: &str) -> Result<ThumbKind, E> {
                use self::ThumbKind::*;
                Ok(match v {
                    "s" => Prop75,
                    "m" => Prop130,
                    "x" => Prop604,
                    "o" => Adapt130,
                    "p" => Adapt200,
                    "q" => Adapt320,
                    "y" => Prop807,
                    "z" => Prop1280x1024,
                    "w" => Prop2560x2048,
                    _ => return Err(::serde::de::Error::invalid_value("album size type"))
                })
            }
        }
        d.deserialize(Visitor)
    }
}

#[derive(Debug, PartialEq, Eq, Deserialize)]
pub struct UploadServer {
    pub upload_url: String,
    pub album_id: Id,
    pub user_id: Id,
}

#[derive(Debug, PartialEq, Eq, Deserialize)]
pub struct UploadUrl {
    pub upload_url: String,
}

// TODO ???
#[derive(Debug, PartialEq, Eq, Deserialize)]
pub struct SavedPhoto {
    pub hash: String,
    pub src: String,
    pub src_big: Option<String>,
    pub src_small: Option<String>,
}

#[derive(Debug, PartialEq, Deserialize)]
pub struct Tag {
    pub id: Id,
    pub user_id: Id,
    pub placer_id: Id,
    pub tagged_name: String,
    pub date: Timestamp,
    #[serde(deserialize_with="::api::parse_boolean")]
    pub viewed: bool,
    pub x: f32,
    pub y: f32,
    pub x1: f32,
    pub y1: f32,
}

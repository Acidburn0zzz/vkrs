
#[derive(Debug, PartialEq, Eq, Deserialize, Clone)]
pub struct WallPost {
    pub id: Id,
    pub owner_id: OwnerId,
    pub from_id: OwnerId,
    #[serde(deserialize_with="::api::parse_timestamp")]
    pub date: NaiveDateTime,
    pub text: String,
    pub reply_owner_id: OwnerId,
    pub reply_post_id: Id,
    #[serde(deserialize_with="::api::parse_boolean")]
    pub friends_only: bool,
    pub comments: CommentsCount,
    pub likes: LikesCount,
    pub reposts: RepostsCount,
    pub post_type: PostType,
    pub post_source: PostSource, // TODO
    pub attachments: Vec<Attachment>, // TODO
    pub geo: GeoLocation, // TODO
    pub signer_id: Id,
    pub copy_history: Option<Vec<RepostInfo>>, // TODO
    #[serde(deserialize_with="::api::parse_boolean")]
    pub can_pin: bool,
    #[serde(deserialize_with="::api::parse_boolean")]
    pub is_pinned: bool,
}

#[derive(Debug, PartialEq, Eq, Deserialize, Clone, Copy)]
pub struct CommentsCount {
    pub count: u32,
    #[serde(deserialize_with="::api::parse_boolean")]
    pub can_post: bool,
}

#[derive(Debug, PartialEq, Eq, Deserialize, Clone, Copy)]
pub struct RepostsCount {
    pub count: u32,
    #[serde(deserialize_with="::api::parse_boolean")]
    pub user_reposted: bool,
}

#[derive(Debug, PartialEq, Eq, Deserialize, Clone, Copy)]
pub enum PostType {
    Post,
    Copy,
    Reply,
    Postpone,
    Suggest
}

#[derive(Debug, PartialEq, Eq, Deserialize, Clone, Copy)]
pub struct PostSource;
#[derive(Debug, PartialEq, Eq, Deserialize, Clone, Copy)]
pub struct Attachment;
#[derive(Debug, PartialEq, Eq, Deserialize, Clone, Copy)]
pub struct GeoLocation;
#[derive(Debug, PartialEq, Eq, Deserialize, Clone, Copy)]
pub struct RepostInfo;

#[derive(Debug, PartialEq, Eq, Deserialize, Clone, Copy)]
pub struct PostId {
    pub post_id: Id,
}
